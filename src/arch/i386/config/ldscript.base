/*
 *	Memory map:
 *
 *	_RAMBASE		
 *				: data segment
 *				: bss segment
 *				: heap
 *				: stack
 *	_ROMBASE
 *				: linuxbios text 
 *				: readonly text
 */
/*
 * Bootstrap code for the STPC Consumer
 * Copyright (c) 1999 by Net Insight AB. All Rights Reserved.
 *
 * $Id: ldscript.base,v 1.2 2001/03/26 21:49:19 rminnich Exp $
 *
 */

/*
 *	Written by Johan Rydberg, based on work by Daniel Kahlin.
 *      Rewritten by Eric Biederman
 */
/*
 *	We use ELF as output format. So that we can
 *	debug the code in some form. 
 */
OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
OUTPUT_ARCH(i386)
/* oh, barf. This wont work if all you use is .o's.  -- RGM */


	/*  These are now set by the config tool 
	_RAMBASE	= 0x04000;
	_ROMBASE	= 0x80000;
	*/

/*
 *	Entry point is not really nececary, since the mkrom(8)
 *	tool creates a entry point that jumps to $0xc000:0x0000.
 */
/* baloney, but ... RGM*/
ENTRY(_start)

SECTIONS
{
	/*
	 * First we place the code and read only data (typically const declared).
	 * This get placed in rom.
	 */
	.text _ROMBASE : {
		_text = .;
		*(.text);
		_etext = .;
	}
	.rodata (.) : {
		_rodata = .;
		*(.rodata);
		_erodata = .;
	}

	. = _RAMBASE;
	/*
	 * After the code we place initialized data (typically initialized
	 * global variables). This gets copied into ram by startup code.
	 * __data_start and __data_end shows where in ram this should be placed,
	 * whereas __data_loadstart and __data_loadend shows where in rom to
	 * copy from.
	 */
	.data (.): AT (_erodata) {
		_data = .;
		*(.data)
		*(.sdata)
		*(.sdata2)
		*(.got)
		_edata = .;
	}
	_ldata	= LOADADDR(.data);
	_eldata	= LOADADDR(.data) + SIZEOF(.data); 	
    
	/*
	 * bss does not contain data, it is just a space that should be zero
	 * initialized on startup. (typically uninitialized global variables)
	 * crt0.S fills between _bss and _ebss with zeroes.
	 */
	.bss (.): {
		_bss = .;
		*(.bss)
		*(.sbss)
		*(COMMON)
		_ebss = .;
	}
	_end = .;

	.heap (.): {
		_heap = .;
		/* Reserve 256K for the heap */
		. = . + 0x40000;
		_eheap = .;
	}
	.stack (.) : {
		_stack = .;
		/* Resever 64k for the stack */
		. = . + 0x10000;
		_estack = .;
	}
}

/*
 *	This provides the start and end address for the whole image 
 */
_image	= LOADADDR(.text);
_eimage	= LOADADDR(.data) + SIZEOF(.data);

/* EOF */
