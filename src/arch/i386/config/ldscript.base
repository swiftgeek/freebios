/*
 *	Memory map:
 *
 *	_RAMBASE		
 *				: data segment
 *				: bss segment
 *				: heap
 *				: stack
 *	_ROMBASE
 *				: linuxbios text 
 *				: readonly text
 */
/*
 * Bootstrap code for the STPC Consumer
 * Copyright (c) 1999 by Net Insight AB. All Rights Reserved.
 *
 * $Id: ldscript.base,v 1.13 2002/07/25 20:50:52 ebiederm Exp $
 *
 */

/*
 *	Written by Johan Rydberg, based on work by Daniel Kahlin.
 *      Rewritten by Eric Biederman
 */
/*
 *	We use ELF as output format. So that we can
 *	debug the code in some form. 
 */
OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
OUTPUT_ARCH(i386)

ENTRY(_start)

SECTIONS
{
	. = DEFINED(_ROMBASE)? _ROMBASE : _RAMBASE;
	/* This section might be better named .setup */
	.rom . : {
		_rom = .;
		*(.rom.text);
		*(.rom.data);
		. = ALIGN(16);
		_erom = .;
	}
	_lrom = LOADADDR(.rom);
	_elrom = LOADADDR(.rom) + SIZEOF(.rom);
	. = DEFINED(_ROMBASE)? _RAMBASE : . ;
	/*
	 * First we place the code and read only data (typically const declared).
	 * This get placed in rom.
	 */
	.text . : AT (_elrom) {
		_text = .;
		*(.text);
		*(.text.*);
		. = ALIGN(16);
		_etext = .;
	}
	_ltext = LOADADDR(.text);
	_eltext = LOADADDR(.text) + SIZEOF(.text);
	.rodata . : AT(_eltext){
		_rodata = .;
		. = ALIGN(4);
		streams = . ;
		*(.rodata.streams)
		estreams = .;
		. = ALIGN(4);
		pci_drivers = . ;
		*(.rodata.pci_drivers)
		epci_drivers = . ;
		*(.rodata)
		*(.rodata.*)
		_erodata = .;
	}	
	_lrodata = LOADADDR(.rodata);
	_elrodata = LOADADDR(.rodata) + SIZEOF(.rodata);
	/*
	 * After the code we place initialized data (typically initialized
	 * global variables). This gets copied into ram by startup code.
	 * __data_start and __data_end shows where in ram this should be placed,
	 * whereas __data_loadstart and __data_loadend shows where in rom to
	 * copy from.
	 */
	.data . : AT(_elrodata) {
		_data = .;
		*(.data)
		_edata = .;
	}
	_ldata	= LOADADDR(.data);
	_eldata	= LOADADDR(.data) + SIZEOF(.data);
	/* The initialized data segment.  
	 * This is all of the data that we copy from rom into the ram.
	 */
	_iseg = _text;
	_eiseg = _edata;
	_liseg = _ltext;
	_eliseg = _eldata;
	/*
	 * bss does not contain data, it is just a space that should be zero
	 * initialized on startup. (typically uninitialized global variables)
	 * crt0.S fills between _bss and _ebss with zeroes.
	 */
	_bss = .;
	.bss . : {
		*(.bss)
		*(.sbss)
		*(COMMON)
	}
	_ebss = .;
	_end = .;
	_stack = .;
	.stack . : {
		/* Reserve a stack for each possible cpu, +1 extra */
		. = ((MAX_CPUS * STACK_SIZE) + STACK_SIZE) ; 
	}
	_estack = .;
	_heap = .;
	.heap . : {
		/* Reserve 256K for the heap */
		. = HEAP_SIZE ;
		. = ALIGN(4);
	}
	_eheap = .;
	/* The ram segment
 	 * This is all address of the memory resident copy of linuxBIOS.
	 */
	_ram_seg = _text;
	_eram_seg = _eheap;
	/DISCARD/ : {
		*(.comment)
		*(.note)
	}
}
