option _ROMBASE=0xf0000
option _RAMBASE=0x4000
option ROM_IMAGE_SIZE=65536

# By default we only have one cpu 
option MAX_CPUS=1
# Reserve 256K for the heap
option HEAP_SIZE=0x40000
# Reserve 8K for each stack
option STACK_SIZE=0x2000

# By default on x86 we have a memory hole between 640K and 1MB
option MEMORY_HOLE=1

option USE_DEFAULT_LAYOUT=1
ldscript arch/i386/config/ldscript.base USE_DEFAULT_LAYOUT
ldscript arch/i386/config/ldscript.cacheram USE_CACHE_RAM

# How do I add -mprefered-stack-boundary=2 if the compiler supports it?
# On x86 tt results in a code size reduction.
#

dir /src/config

makerule all : romimage ;
makerule floppy : all ; mcopy -o romimage a:
makerule romimage : linuxbios.rom payload.bin.gz.block ; cat payload.bin.gz.block linuxbios.rom > romimage


makerule linuxbios.rom: linuxbios.strip ; 
addaction linuxbios.rom export size=`ls -l linuxbios.strip | (read p c u g size r ; echo $$size)` ; \
addaction linuxbios.rom echo $$size ; \
addaction linuxbios.rom dd if=linuxbios.strip of=linuxbios.rom bs=1 seek=`expr $(ROM_IMAGE_SIZE) - $$size`


makerule mkrom: $(TOP)/mkrom/mkrom.c ; $(CC) -o mkrom $<


makerule payload.bin.gz.block : payload.bin.gz ; dd conv=sync bs=448k if=payload.bin.gz of=payload.bin.gz.block
makerule payload.bin.gz: payload.bin ;gzip -f -3 payload.bin
makerule payload.bin: $(PAYLOAD) ;  objcopy -O binary -R .note -R .comment -S $< payload.bin


addaction clean rm -f romimage mkrom payload.*

# do standard config files that the user need not specify
# for now, this is just 'lib', but it may be more later. 
dir /src/arch/i386
