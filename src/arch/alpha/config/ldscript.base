/*
 *      Memory map:
 *
 *      _RAMBASE
 *                              : data segment
 *                              : bss segment
 *                              : heap
 *                              : stack
 *      _ROMBASE
 *                              : linuxbios text
 *                              : readonly text
 */

OUTPUT_FORMAT("elf64-alpha")
ENTRY(start)
SECTIONS
{
        . = DEFINED(_ROMBASE)? _ROMBASE : _RAMBASE;

	.rom . : {
		_rom = .;
		*(.rom.text);
		*(.rom.data);
		. = ALIGN(16);
		_erom = .;
	}
	_lrom = LOADADDR(.rom);
	_elrom = LOADADDR(.rom) + SIZEOF(.rom);

	/*
	 * First we place the code and read only data (typically const declared).
	 * This get placed in rom.
	 */
	.text : {
		_text = .;
		*(.text);
		*(.text.*);
		. = ALIGN(16);
		_etext = .;
	}

	_ltext = LOADADDR(.text);
	_eltext = LOADADDR(.text) + SIZEOF(.text);
	.rodata . : AT(_eltext){
		_rodata = .;
		. = ALIGN(4);
		streams = . ;
		*(.rodata.streams)
		estreams = .;
		*(.rodata)
		*(.rodata.*)
		_erodata = .;
	}	
	_lrodata = LOADADDR(.rodata);
	_elrodata = LOADADDR(.rodata) + SIZEOF(.rodata);


	. = _RAMBASE;
	/* Global data */
	.data : {
		_data = .;
		*(.data.cacheline_aligned)
		*(.data) CONSTRUCTORS
		*(.got)
		*(.sdata)
		_edata = .;
	}
	_ldata	= LOADADDR(.data);
	_eldata	= LOADADDR(.data) + SIZEOF(.data);

	/*
	 * After the code we place initialized data (typically initialized
	 * global variables). This gets copied into ram by startup code.
	 * __data_start and __data_end shows where in ram this should be placed,
	 * whereas __data_loadstart and __data_loadend shows where in rom to
	 * copy from.
	 */
	.data . : AT(_elrodata) {
		_data = .;
		*(.data)
		_edata = .;
	}
	_ldata	= LOADADDR(.data);
	_eldata	= LOADADDR(.data) + SIZEOF(.data);
	/* The initialized data segment.  
	 * This is all of the data that we copy from rom into the ram.
	 */
	_iseg = _text;
	_eiseg = _edata;
	_liseg = _ltext;
	_eliseg = _eldata;
	
	/* Important align _bss so bss may be zeroed with quadword access */
	. = ALIGN(8);
	.bss : {
		_bss = .;
		*(.sbss) 
		*(.scommon)
		*(.bss)
		*(COMMON)
		/* Important align _ebss so bss may be zeroed with quadword access */
		. = ALIGN(8);
		_ebss = .;
	}
	_end = .;
	
	/* Align the heap to a quadword boundary */
	. = ALIGN(8);
	.heap : {
		_heap = .;			
		/* Reserve a 128K for the heap */
		. = . + 128*1024;
		. = ALIGN(8);
		_eheap = .;
	}
	. = ALIGN(8);
	.stack : {
		_stack = .;
		/* Allocate an 8k stack that grows backwards into the heap */
		. = . + 8192;
		. = ALIGN(8);
		_estack = .;
	}
        /* The ram segment
	 * This is all address of the memory resident copy of linuxBIOS.
	 */
	_ram_seg = _text; 
	_eram_seg = _eheap;
			
	
	/DISCARD/ : {
		/* Comment sections */
		*(.mdebug) 
		*(.note) 
		*(.comment) 
		/* DWARF 1 */
		*(.debug) 
		*(.line) 
		/* GNU DWARF 1 extensions */
		*(.debug_srcinfo)
		*(.debug_sfnames) 
		/* DWARF 1.1 and DWARF 2 */
		*(.debug_aranges)
		*(.debug_pubnames) 
		/* DWARF 2 */
		*(.debug_info)
		*(.debug_abbrev)
		*(.debug_line)
		*(.debug_frame)
		*(.debug_str) 
		*(.debug_loc) 
		*(.debug_macinfo)
		/* SGI/MIPS DWARF 2 extensions */
		*(.debug_weaknames)
		*(.debug_funcnames)
		*(.debug_typenames)
		*(.debug_varnames)
		/* Kernel module cleanup sections */
		*(.text.exit)
		*(.data.exit)
	}
}
